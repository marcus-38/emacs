#+TITLE: I tinker with my Emacs Configuration
#+OPTIOINS: toc:2 num:nil

* Emacs Configuration
:PROPERTIES:
:ID:       09343f47-1679-440f-95cd-f785f7c69ae2
:CUSTOM_ID: emacs-configuration
:END:
This is my personal Emacs configuration. It is a wok in progress. The relevant
configuration files are tangled from this Org-document (=C-c C-v t=). I don't
tangle on save or anything like that. This configuration will probably never be
finished. This is one of my many rabbit holes...

I use github as my backup. Not to share code. Don't use my configuration as is.
I regulary commit this configuration to github even though it is not working.
Yes I know, I shouldn't but I do so you have been warned.

*Here be dragons*


If you are looking for insperation, check out these instead:
- [[https://sachachua.com/blog/][Sacha Chua's Living an awesome life]]
- [[https://protesilaos.com/][Protesilaos Stavrou's personal website]]
- [[https://www.spacemacs.org/][Spacemacs - a community-driven Emacs distribution]]
- [[https://github.com/doomemacs/doomemacs][Doom Emacs - a configuration framework for Emacs]]

If you want to learn more about Org:
- [[https://orgmode.org/manual/index.html][The Org manual]]
- [[https://www.gnu.org/software/emacs/tour/][A guided tour of Emacs]]
- [[https://www.gnu.org/software/emacs/manual/index.html][GNU Emacs Manuals Online]]

* Table of Contents
:PROPERTIES:
:ID:       b189e2ec-4f92-4bed-b382-b2ce1303e84f
:TOC:      :include all :depth 3 :force (nothing) :ignore (nothing) :local (depth)
:CUSTOM_ID: table-of-contents
:END:
:CONTENTS:
- [[#emacs-configuration][Emacs Configuration]]
- [[#table-of-contents][Table of Contents]]
- [[#generate-files-and-file-headers][Generate files and file headers]]
  - [[#initel][init.el]]
  - [[#early-initel][early-init.el]]
  - [[#customel][custom.el]]
- [[#aliases][Aliases]]
- [[#early-init][Early-init]]
  - [[#garbage-collection][Garbage collection]]
- [[#package-manager][Package Manager]]
- [[#misc-settings][Misc settings]]
- [[#look-and-feel][Look and Feel]]
  - [[#which-key][Which key]]
  - [[#vertico][Vertico]]
  - [[#save-history][Save history]]
  - [[#marginalia][Marginalia]]
  - [[#orderless][Orderless]]
  - [[#emacs-minibuffer-configuration][Emacs minibuffer configuration]]
  - [[#doom-themes][Doom Themes]]
  - [[#modeline][Modeline]]
  - [[#fonts][Fonts]]
  - [[#all-the-icons][All-the-icons]]
  - [[#all-the-icons-completion][All-the-icons-completion]]
  - [[#nerd-icons][Nerd icons]]
  - [[#window][Window]]
  - [[#switch-window][Switch window]]
  - [[#winner][Winner]]
  - [[#ibuffer][Ibuffer]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#personal-keybindings][Personal keybindings]]
  - [[#ivy-and-counsel][Ivy and Counsel]]
  - [[#general][General]]
  - [[#helpful][Helpful]]
  - [[#move-text][Move text]]
  - [[#tldr][TLDR]]
- [[#programming][Programming]]
  - [[#magit][Magit]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#projectile][Projectile]]
- [[#org][Org]]
  - [[#org-make-][Org make-]]
  - [[#org-tempo][Org tempo]]
  - [[#org-bullets][Org bullets]]
- [[#shells-and-terminals][Shells and terminals]]
  - [[#eshell][Eshell]]
:END:

* Generate files and file headers
:PROPERTIES:
:ID:       b4a28b58-af79-40c9-814d-eb61d5f09fbb
:CUSTOM_ID: generate-files-and-file-headers
:END:
The file headers sets [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical-binding]] to true. I also try to warn people not to
use this configuration as is.

*Here be dragons*

** init.el
:PROPERTIES:
:ID:       e23de079-3a6b-4539-8009-07ebbc60ff1a
:CUSTOM_ID: initel
:END:
Header text and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;;; init.el -*- lexical-binding: t; -*-

  ;;; Commentary:
  ;; This is my personal Emacs configuration. The file is tangled from a
  ;; literate org document where I try to document what each piece is for.
  ;; If you found my configurations you are free to use as you please, but
  ;; please read the whole thing before you do. I regulary commit my
  ;; configuration even though it is not working. Yes, I know, you shouldn't
  ;; do that but you have been warned.

  ;; Here be dragons

  ;; Code:
#+end_src

** early-init.el
:PROPERTIES:
:ID:       da74a372-1f4c-4047-93bc-b7abae58327d
:CUSTOM_ID: early-initel
:END:
Header text and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el :mkdirp yes
;;; early-init.el -*- lexical-binding: t; -*-

;;; Commentary:
;; This is my personal Emacs configuration. The file is tangled from a
;; literate org document where I try to document what each piece is for.
;; If you found my configurations you are free to use as you please, but
;; please read the whole thing before you do. I regulary commit my
;; configuration even though it is not working. Yes, I know, you shouldn't
;; do that but you have been warned.

;; Here be dragons

;; Code:
#+end_src

** custom.el
:PROPERTIES:
:ID:       2afa1d80-84f9-4cc0-bf39-d812d6d83e8d
:CUSTOM_ID: customel
:END:
In Emacs, a custom file is used to store customization settings seperately
from the main init file, allowing for easier management of user preferences.
I use this literate org-file but I like to separate the preferences all the same.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Aliases
:PROPERTIES:
:ID:       f5220e9f-af04-417b-9a65-fa3d67010025
:CUSTOM_ID: aliases
:END:
Here I set my aliases I like to use.

#+begin_src bash :tangle ~/.emacs.d/eshell/aliases :mkdirp yes
  # alias for emacs commands
  alias ff find-file $1

  # aliasing standard shell commands to better emacs alternatives
  alias less view-file $1
#+end_src

* Early-init
:PROPERTIES:
:ID:       f7e0fdee-a113-4843-8166-fc9328cae8d0
:CUSTOM_ID: early-init
:END:
** Garbage collection
:PROPERTIES:
:ID:       fabf79ba-92bc-4ad3-a7c5-5356c0a79965
:CUSTOM_ID: garbage-collection
:END:
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
#+end_src

* Package Manager
:PROPERTIES:
:ID:       59ca8f2d-5a9f-45a1-9582-0d31e70a7c99
:CUSTOM_ID: package-manager
:END:
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html][Package installation]] are usually installed using =use-package=. Some packages
are downloaded or cloned from sources outside of the ones listed below. These
packages live in =~/.emacs.d/manual-packages=. This code sets up the package
manager, adds sources and initialize the packages manager.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("melpa-stable" . "https://stable.melpa.org/packages/")
  			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
  			 ("gnu" . "https://elpa.gnu.org/packages/")))
  (setq package-user-dir (expand-file-name "~/.emacs.d/packages"))
  (require 'package)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (package-install-selected-packages)
  (require 'use-package)
#+end_src

* Misc settings
:PROPERTIES:
:ID:       43dcbe04-dc3a-4be8-a402-eab1e425a79b
:CUSTOM_ID: misc-settings
:END:
Settings that doesn't fit in anywhere else gets it's own place here.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq-default c-basic-offset 4 ; Amount of basic offset used by + and - symbols in 'c-offsets-alist'. 
  	      c-default-style "linux" ; Style which gets installed by default when a file is visited.
  	      indent-tabs-mode nil ; Don't insert tabs
  	      fill-column 80 ; Column beyond which automatic line-wrapping should happen.
            column-number-mode t ; Show column number in modeline.
  	      tab-width 4) ; Distance between tab stops, in columns.

  (setq default-tab-width 4) ; default tab-width to 4 characters
  (tool-bar-mode -1) ; Disable the tool-bar.
  (scroll-bar-mode -1) ; Specify whether to have vertical scroll bars, and on which side.
  (menu-bar-mode -1) ; Disable the menu-bar

  (setq load-prefer-newer t) ; Non-nil means load prefers the newest version of a file.
  (setq tab-always-indent 'complete) ; Controls the operation of the TAB key.

  (delete-selection-mode 1) ; select text and delete it by typing.
  (setq org-support-shift-select t) ; Non-nil means make shift-cursor select text when possible.

  (global-hl-line-mode 1) ; Highlight the current line in Emacs.

  (setq display-line-numbers 'relative) ; Show relative line numbers

  (cua-mode 1) ; standard keyboard shortcuts for cut, copy, paste and undo
               ; C-c = copy
               ; C-x = cut
               ; C-v = paste
               ; C-z = undo

#+end_src

* Look and Feel
:PROPERTIES:
:ID:       b4317374-26d8-4d71-bb40-78946ec94b37
:CUSTOM_ID: look-and-feel
:END:
** Which key
:PROPERTIES:
:ID:       008cab1b-8437-4962-afef-b11c8cdaed80
:CUSTOM_ID: which-key
:END:
[[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete
command (a prefix) in a popup. 

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package which-key
    :ensure t
    :delight
    :custom (which-key-idle-delay 0.5)
    :config (which-key-mode))
#+end_src

** Vertico
:PROPERTIES:
:ID:       afab5a72-3d01-4264-82d3-25bc98d269e4
:CUSTOM_ID: vertico
:END:
[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system. 

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package vertico
      :ensure t
      :init (vertico-mode)
      :bind (:map vertico-map
    	      ("C-<backspace>" . vertico-directory-up))
      :config
      (keymap-set vertico-map "?" #'minibuffer-completion-help)
      (keymap-set vertico-map "M-RET" #'minibuffer-force-complete-and-exit)
      (keymap-set vertico-map "M-TAB" #'minibuffer-complete))
#+end_src

** Save history
:PROPERTIES:
:ID:       f2dff2fc-f45f-431c-8fe1-9524e69ed73a
:CUSTOM_ID: save-history
:END:
Vertico sorts by history position.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package savehist
    :init
    (savehist-mode))
#+end_src 

** Marginalia
:PROPERTIES:
:ID:       572a1a5b-e918-4a16-af33-af8992d4a655
:CUSTOM_ID: marginalia
:END:
[[https://github.com/minad/marginalia][Marginalia]] are marks or annotations placed at the margin of the page of a book or in this case helpful colorful
annotations placed at the margin of the minibuffer for your completion candidates.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package marginalia
    :ensure t
    :after vertico
    :init (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

** Orderless
:PROPERTIES:
:ID:       7394eb5c-4819-4465-b380-2c7e12f94e78
:CUSTOM_ID: orderless
:END:
This package provides an [[https://github.com/oantolin/orderless][orderless]] completion style that divides the pattern into space-separated components,
and matches candidates that match all of the components in any order. Each component can match in any one of several
ways: literally, as a regexp, as an initialism, in the flex style, or as multiple word prefixes. By default, regexp
and literal matches are enabled.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package orderless
    :ensure t
    :custom
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless basic)))
#+end_src

** Emacs minibuffer configuration
:PROPERTIES:
:ID:       2386fc56-8664-46b4-8878-3d74fa25eeea
:CUSTOM_ID: emacs-minibuffer-configuration
:END:
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package emacs
    :custom
    (enable-recursive-minibuffers t)
    (read-extended-command-predicate #'command-completion-default-include-p)
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))
#+end_src

** Doom Themes
:PROPERTIES:
:ID:       b9c589dc-625e-4e80-9a53-d3cb1dcfd2ae
:CUSTOM_ID: doom-themes
:END:
A [[https://github.com/doomemacs/themes][theme megapack]] for GNU Emacs, inspired by community favorites.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package doom-themes
    :ensure t)
  (load-theme 'doom-one :no-confirm)
#+end_src

** Modeline
:PROPERTIES:
:ID:       5c1d34f2-2583-47e0-bab0-d22e4ecea22f
:CUSTOM_ID: modeline
:END:
[[https://github.com/seagle0128/doom-modeline][Doom modeline]] is used to cleanup and configure the modeline.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package doom-modeline
    :ensure t
    :config
    (setq
     doom-modeline-support-imenu t
     doom-modeline-icon t
     doom-modeline-major-mode-icon t
     doom-modeline-buffer-state-icon t
     doom-modeline-buffer-modification-icon t
     doom-modeline-column-zero-based t
     doom-modeline-highlight-modified-buffer-name nil
     doom-modeline-percent-position '(-3 "%p")
     doom-modeline-position-column-line-format '("%l:%c")
     doom-modeline-total-line-number t
     doom-modeline-modal t
     doom-modeline-modal-modern-icon t
     doom-modeline-time t
     )
    (setq doom-modeline-height 1)
    (custom-set-faces
     '(mode-line ((t (:family "FiraCode Nerd Font" :height 0.9))))
     '(mode-line-active ((t (:famliy "FiraCode Nerd Font" :height 0.9))))
     '(mode-line-inactive ((t (:family "FiraCode Nerd Font" :height 0.9)))))
    :init
    (doom-modeline-mode 1))
#+end_src

** Fonts
:PROPERTIES:
:ID:       70e1ff31-a9cb-4890-ae61-4b4b9f206cb8
:CUSTOM_ID: fonts
:END:
Setting the font faces.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (set-face-attribute 'default nil
                      ;; :font "Iosevka Fixed"
                      :font "FiraCode Nerd Font"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      ;; :font "Iosevka"
                      :font "FiraCode nerd Font"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "FiraCode Nerd Font"
                      ;; :font "Iosevka Fixed"
                      :height 130
                      :weight 'medium)
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)
#+end_src

** All-the-icons
:PROPERTIES:
:ID:       15bb2874-6932-47d1-958b-c502f5a7ebd4
:CUSTOM_ID: all-the-icons
:END:
[[https://github.com/domtronn/all-the-icons.el][All-the-icons]] is a utility package to collect various Icon Fonts and propertize them within Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+end_src

** All-the-icons-completion
:PROPERTIES:
:ID:       07d958df-9362-4c0e-a6ac-630a4214432a
:CUSTOM_ID: all-the-icons-completion
:END:
[[https://github.com/iyefrat/all-the-icons-completion][All-the-icons-completion]] adds icons to completion candidates in Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons-completion
    :ensure t
    :defer
    :hook (marginalia-mode . #'all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src

** Nerd icons
:PROPERTIES:
:ID:       4bb8c5e4-4a95-45d1-a57e-738691514ed4
:CUSTOM_ID: nerd-icons
:END:
[[https://github.com/emacsmirror/nerd-icons][Nerd-icons]] - Emacs Nerd Font Icons Library.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package nerd-icons
    :ensure t)
  (setq nerd-icons-font-family "FiraCode Nerd Font")
#+end_src

** Window
:PROPERTIES:
:ID:       8c55f09a-2cc7-45d1-8dee-3543c65b63cc
:CUSTOM_ID: window
:END:
Setup how to split windows in Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package window
    :ensure nil
    :bind (("C-x 2" . vsplit-last-buffer)
           ("C-x 3" . hsplit-last-buffer)
           ([remap kill-buffer] . kill-this-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))
    (defun vsplit-last-buffer ()
      "Focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1)))
#+end_src

** Switch window
:PROPERTIES:
:ID:       25402c3a-1c2b-4664-aeb2-3db770e2c0aa
:CUSTOM_ID: switch-window
:END:
[[https://github.com/dimitri/switch-window][Switch-window]] offer a visual way to choose a window to switch to.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package switch-window
    :ensure t
    :bind (("C-x o" . switch-window)
           ("C-x w" . switch-window-then-swap-buffer)))
#+end_src

** Winner
:PROPERTIES:
:ID:       b099f7bd-e78f-46b4-94a3-aceb38fb6bd2
:CUSTOM_ID: winner
:END:
Winner mode in Emacs allows you to restore previous window configurations after
they have been changed, making it easier to manage your layout.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package winner
    :ensure nil
    :config (winner-mode))
#+end_src

** Ibuffer
:PROPERTIES:
:ID:       a40b06f4-aba4-4179-b0ee-e3cc2830a7ab
:CUSTOM_ID: ibuffer
:END:
I found a post [[https://tech.tonyballantyne.com/2020/09/26/ibuffer-changed-my-life/][ibuffer changed my life]] from Tony Ballantyne Tech.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x C-b") 'ibuffer) ; instead of buffer-list
  (setq ibuffer-expert t)                   ; stop yes no prompt on delete
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (mode . org-mode))
                 ("magit" (name . "^magit"))
                 ("planner" (or
                             (name . "^\\*Calendar\\*$")
                             (name . "^\\*Org Agenda\\*$")))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook (lambda ()
                                 (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

* Keybindings
:PROPERTIES:
:ID:       ed00b6c1-85c2-4b2b-8bfb-a52e51a954df
:CUSTOM_ID: keybindings
:END:
** Evil
:PROPERTIES:
:ID:       1ae2dce6-7075-4450-94de-e070a9c313d0
:CUSTOM_ID: evil
:END:
[[https://github.com/emacs-evil/evil][Evil]] is an extensible *vi* layer for Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)
    (evil-mode 1))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (add-to-list 'evil-collection-mode-list 'help)
    (evil-collection-init))

  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  (setq org-return-follows-link t)
#+end_src

** Personal keybindings
:PROPERTIES:
:ID:       a270f9f2-1d9c-4ce3-9930-b8241af5e41f
:CUSTOM_ID: personal-keybindings
:END:
This is probably not the only place where keybindings are defined.
There are some in the =General= section and in other places. Oh my!

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-c g") 'magit-status)           ; magit status
  (global-set-key (kbd "C-c p") 'projectile-command-map) ; projectile command map
  (global-set-key (kbd "C-+") 'text-scale-increase)      ; increase text size
  (global-set-key (kbd "C--") 'text-scale-decrease)      ; decrease text size
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
  (global-set-key [escape] 'keyboard-escape-quit)        ; be default, Emacs requires you to hit ESC
                                                         ; three times to escape quit the minibuffer
#+end_src

** Ivy and Counsel
:PROPERTIES:
:ID:       2ec2540b-f62d-48c3-8c48-8239114f960d
:CUSTOM_ID: ivy-and-counsel
:END:
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package counsel
    :ensure t
    :after ivy
    :diminish
    :config
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil))

  (use-package ivy
    :ensure t
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init (ivy-rich-mode 1)
    :custom (ivy-virtual-abbreviate 'full
                                    ivy-rich-switch-buffer-align-virtual-buffer t
                                    ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

** General
:PROPERTIES:
:ID:       8fc3f3aa-013e-4f8a-917a-0c06027d2992
:CUSTOM_ID: general
:END:
[[https://github.com/noctuid/general.el][General]] is a more convenient key definition system in Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package general
    :ensure t
    :config
    (general-evil-setup)
    ;; set up "SPC" as the global leader key
    (general-create-definer my/leader-keys
                            :states '(normal insert visual emacs)
                            :keymaps 'override
                            :prefix "SPC"
                            :global-prefix "M-SPC") ; access leader key in insert mode
    (my/leader-keys
     "SPC" '(counsel-M-x :wk "Counsel M-x")
     "." '(find-file :wk "Find file")
     "TAB TAB" '(comment-line :wk "Comment lines")
     "u" '(universal-argument :wk "Universal argument")
     )

    (my/leader-keys
      "b" '(:ignore t :wk "Bookmarks/Buffers")
      "b b" '(switch-to-buffer :wk "Switch to buffer")
      "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
      "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
      "b d" '(bookmark-delete :wk "Delete bookmark")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-current-buffer :wk "Kill current buffer")
      "b l" '(list-bookmarks :wk "List bookmarks")
      "b m" '(bookmark-set :wk "Set bookmark")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
      "b R" '(rename-buffer :wk "Rename buffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(save-some-buffers :wk "Save multiple buffers")
      "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file")
      )

    (my/leader-keys
      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Open dired")
      "d j" '(dired-jump :wk "Dired jump to current")
      )

    (my/leader-keys
      "e" '(:ignore t :wk "Eshell/Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e h" '(counsel-ssh-history :wk "Eshell history")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")
      "e R" '(eww-reload :wk "Reload current page in EWW")
      "e s" '(eshell :wk "Eshell")
      "e w" '(eww :wk "EWW emacs web browser")
      )

    (my/leader-keys
      "f" '(:ignore t :wk "Files")
      "f c" '((lambda () (interactive) (find-file "~/repos/emacs/README.org")) :wk "Open emacs configuration file")
      "f e" '((lambda () (interactive) (dired "~/repos/emacs/")) :wk "Open config dir in dired")
      "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
      "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
      "f l" '(counsel-locate :wk "Locate a file")
      "f r" '(counsel-recentf :wk "Find recent files")
      "f s" '(basic-save-buffer :wk "Save file")
      "f S" '(save-some-buffers :wk "Save multiple buffers")
      )

    (my/leader-keys
      "g" '(:ignore t :wk "Git")
      "g d" '(magit-dispatch :wk "Magit dispatch")
      "g ." '(magit-file-dispatch :wk "Magit file dispatch")
      "g b" '(magit-branch-checkout :wk "Switch branch")
      "g c" '(:ignore t :wk "Create")
      "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
      "g c c" '(magit-commit-create :wk "Create commit")
      "g c f" '(magit-commit-fixup :wk "Create fixup commit")
      "g C" '(magit-clone :wk "Clone repo")
      "g f" '(:ignore t :wk "Find")
      "g f c" '(magit-show-commit :wk "Magit show commit")
      "g f f" '(magit-find-file :wk "Magit find file")
      "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
      "g F" '(magit-fetch :wk "Git fetch")
      "g g" '(magit-status :wk "Magit status")
      "g i" '(magit-init :wk "Initialize git repo")
      "g l" '(magit-log-buffer-file :wk "Magit buffer log")
      "g r" '(vc-revert :wk "Git revert file")
      "g s" '(magit-stage-file :wk "Git stage file")
      "g u" '(magit-unstage-file :wk "Git unstage file")
      )

    (my/leader-keys
      "h" '(:ignore t :wk "Help")
      "h a" '(counsel-apropos :wk "Apropos")
      "h b" '(describe-bindings :wk "Desc. bindings")
      "h c" '(describe-char :wk "Desc. character under cursor")
      "h d" '(:ignore t :wk "Emacs documentation")
      "h d a" '(about-emacs :wk "About Emacs")
      "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
      "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
      "h d m" '(info-emacs-manual :wk "The Emacs manual")
      "h d n" '(view-emacs-news :wk "View Emacs News")
      "h d o" '(describe-distribution :wk "How to obtain Emacs")
      "h d p" '(view-emacs-problems :wk "View Emacs problems")
      "h d t" '(view-emacs-todo :wk "View Emacs todo")
      "h d w" '(describe-no-warranty :wk "Desc. no warranty")
      "h e" '(view-echo-area-messages :wk "View echo area messages")
      "h f" '(describe-function :wk "Desc. function")
      "h F" '(describe-face :wk "Desc. face")
      "h g" '(describe-gnu-project :wk "Desc. GNU Project")
      "h i" '(info :wk "Info")
      "h I" '(describe-input-method :wk "Desc. input method")
      "h k" '(describe-key :wk "Desc. key")
      "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
      "h L" '(describe-language-environment :wk "Desc. language environment")
      "h m" '(describe-mode :wk "Desc. mode")
      "h r" '(:ignore t :wk "Reload")
      "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :wk "Reload emacs config")
      "h t" '(load-theme :wk "Load theme")
      "h v" '(describe-variable :wk "Desc. variable")
      "h w" '(where-is :wk "Prints keybinding for command if set")
      "h x" '(describe-command :wk "Desc. command")
      )

    (my/leader-keys
      "o" '(:ignore t :wk "Org")
      "o a" '(org-agenda :wk "Org agenda")
      "o e" '(org-export-dispatch :wk "Org export dispatch")
      "o i" '(org-toggle-item :wk "Org toggle item")
      "o t" '(org-todo :wk "Org todo")
      "o B" '(org-babel-tangle :wk "Org babel tangle")
      "o T" '(org-todo-list :wk "Org todo list")
      "o b" '(:ignore t :wk "Tables")
      "o b -" '(org-table-insert-hline :wk "Insert hline in table")
      "o d" '(:ignore t :wk "Date/deadline")
      "o s" '(org-time-stamp :wk "Org time stamp")
      "o p" '(org-present :wk "Org present")
      )
    

    (my/leader-keys
      "i" '(:ignore t :wk "Internet")
      ;; "i e" '(elfeed :wk "Open Elfeed")
      ;; "i u" '(elfeed-update :wk "Elfeed update")
      )

    (my/leader-keys
      "p" '(projectile-command-map :wk "Projectile")
      )

    (my/leader-keys
      "s" '(:ignore t :wk "Search")
      "s d" '(dictionary-search :wk "Search dictioinary")
      "s m" '(man :wk "Man pages")
      "s t" '(tldr :wk "Lookup TLDR docs for a command")
      )

    (my/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t t" '(ef-themes-toggle :wk "Switch light/dark theme")
      "t e" '(eshell-toggle :wk "Toggle Eshell")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t r" '((lambda() (interactive) (setq display-line-numbers 'relative)) :wk "Relative line numbers")
      "t o" '((lambda() (interactive) (setq display-line-numbers 't)) :wk "Ordinary line numbers")
      )

    (my/leader-keys
      "w" '(:ignore t :wk "Windows")
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w l" '(evil-window-right :wk "Window right")
      "w k" '(evil-window-up :wk "Window up")
      "w w" '(evil-window-next :wk "Next window")
      )
    
    ) 
#+end_src

** Helpful
:PROPERTIES:
:ID:       1850714f-29eb-454c-a8f8-1ff875b7c987
:CUSTOM_ID: helpful
:END:
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package helpful
    :ensure t
    :commands (helpful-at-point
  	     helpful-callable
  	     helpful-command
  	     helpful-function
  	     helpful-key
  	     helpful-macro
  	     helpful-variable)
    :bind
    ([remap display-local-help] . helpful-at-point)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** Move text
:PROPERTIES:
:ID:       61eef392-399d-4ec0-b2fe-2d62a2209bc8
:CUSTOM_ID: move-text
:END:
[[https://github.com/emacsfodder/move-text][MoveText]] allows you to move the current line using M-up / M-down (or any other bindings you choose)
if a region is marked, it will move the region instead.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package move-text
    :ensure t
    :defer
    :init (move-text-default-bindings))
#+end_src

** TLDR
:PROPERTIES:
:ID:       6f0edc20-9009-4635-9b49-a46d0ab4e353
:CUSTOM_ID: tldr
:END:
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package tldr
    :ensure t)
#+end_src

* Programming
:PROPERTIES:
:ID:       8a7174a2-7846-47f7-a898-3b707e0beae9
:CUSTOM_ID: programming
:END:
** Magit
:PROPERTIES:
:ID:       b7bae419-7a23-4590-916e-af05d9e760de
:CUSTOM_ID: magit
:END:
[[https://magit.vc/][Magit]] is a complete text-based user interface to Git. It fills the glaring gap between
the Git command-line interface and various GUIs, letting you perform trivial as well as
elaborate version control tasks with just a couple of mnemonic key presses. Magit looks
like a prettified version of what you get after running a few Git commands but in Magit
every bit of visible information is also actionable to an extent that goes far beyond
what any Git GUI provides and it takes care of automatically refreshing this output when
it becomes outdated. In the background Magit just runs Git commands and if you wish you
can see what exactly is being run, making it possible for you to learn the git command-line
by using Magit.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package magit
    :ensure t)
#+end_src

** Corfu
:PROPERTIES:
:ID:       575bc524-8df5-4513-a007-04b69d7a88dd
:CUSTOM_ID: corfu
:END:
[[https://github.com/minad/corfu][Corfu]] enhances in-buffer completion with a small completion popup.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package corfu
    :ensure t
    :defer t
    :init (global-corfu-mode))

  (use-package emacs
    :custom
    (tab-always-indent 'complete)
    (text-mode-ispell-word-completion nil)
    (read-extended-command-predicate #'command-completion-default-include-p))

  (use-package dabbrev
    :ensure t
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

** Cape
:PROPERTIES:
:ID:       cf8fff05-8406-479e-a708-dad26ec52156
:CUSTOM_ID: cape
:END:
[[https://github.com/minad/cape][Cape]] provides completion at point extensions which can be used in comlbination with
[[https://github.com/minad/corfu][Corfu]], [[https://github.com/company-mode/company-mode][Company]] or the default completion UI.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package cape
    :ensure t
    :defer t
    :commands (cape-dabbrev cape-file cape-elisp-block)
    :bind ("C-c p" . cape-prefix-map)
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src

** Projectile
:PROPERTIES:
:ID:       8d599f14-19a5-43ee-8f4a-8b224d061a87
:CUSTOM_ID: projectile
:END:
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction Library for Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    )
#+end_src

* Org
:PROPERTIES:
:ID:       14e0936c-b949-476a-bc5b-9c96e132565f
:CUSTOM_ID: org
:END:
Why usse Emacs? Because [[https://orgmode.org/][Org-mode]] exists. Org-mode is a  GNU Emacs major mode for
keeping notes, authoring documents, computational notebooks, literate programming,
maintaining to-do lists, planning projects, and more — in a fast and effective
plain text system.

This configuration file is writen with org-mode.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org
    :ensure t)
#+end_src

** Org make-
:PROPERTIES:
:CUSTOM_ID: org-make-
:ID:       63ea68e2-260b-451c-b35f-67f998a4db87
:END:
:CONTENTS:

:END:
toc
:PROPERTIES:
:ID:       792f468a-b8e2-4f9e-8ffa-0eb848b34cd8
:TOC:      :include all :depth 3 :force (nothing) :ignore (nothing) :local (nothing)
:END:
[[https://github.com/alphapapa/org-make-toc][Org-make-toc]] creates tables of contents for org-mode files.

A document may have any number of tables of contents (TOCs), each of which may list entries in a highly
configurable way.

To make a basic TOC, follow these steps:

1. Choose a heading to contain a TOC and move the point to it.
2. Run command =org-make-toc-insert=, which inserts a =:CONTENTS:= drawer and sets TOC properties.
   Set the =include= property to all.
3. Run the command =org-make-toc= to update all TOCs in the document.

Use command =org-make-toc-set= to change TOC properties for the entry at point with completion.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-make-toc
    :ensure t
    :config
    (setq org-make-toc-insert-custom-ids t))

  (defun my/update-toc-before-save-hook ()
    "Update TOC before saving buffer in org-mode"
    (when (eq major-mode 'org-mode)
      (org-make-toc)
      ))

  (add-hook 'before-save-hook #'my/update-toc-before-save-hook)

  (defun my/org-add-ids-to-headlines-in-file ()
    "Add ID properites to all headlines in the current file which do not already have one."
    (interactive)
    (org-map-entries 'org-id-get-create))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))
#+end_src

** Org tempo
:PROPERTIES:
:ID:       06da885d-ea2d-4168-a87d-f7bcb48e8434
:CUSTOM_ID: org-tempo
:END:
With [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] it is possible to insert empty structural blocks,
such as ‘#+BEGIN_SRC’ … ‘#+END_SRC’, or to wrap existing text in such a block.

|-----+-----------------------------------------|
| Key | Template                                |
|-----+-----------------------------------------|
| c   | ‘#+BEGIN_CENTER’ … ‘#+END_CENTER’       |
| C   | ‘#+BEGIN_COMMENT’ … ‘#+END_COMMENT’     |
| e   | ‘#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’     |
| a   | ‘#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT’ |
| h   | ‘#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’  |
| l   | ‘#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’ |
| E   | ‘#+BEGIN_EXPORT’ … ‘#+END_EXPORT’       |
| q   | ‘#+BEGIN_QUOTE’ … ‘#+END_QUOTE’         |
| el  | ‘#+BEGIN_SRC emacs-lisp’ … ‘#+END_SRC’  |
| s   | ‘#+BEGIN_SRC’ … ‘#+END_SRC’             |
| v   | ‘#+BEGIN_VERSE’ … ‘#+END_VERSE’         |
|-----+-----------------------------------------|

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-tempo
    :config
    (add-to-list 'org-structure-template-alist
  	       '("el" . "src emacs-lisp")))
#+end_src

** Org bullets
:PROPERTIES:
:ID:       2d554ba7-d774-4efc-8bc4-d03953a4e25c
:CUSTOM_ID: org-bullets
:END:
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-bullets
    :ensure t
    )
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* Shells and terminals
:PROPERTIES:
:CUSTOM_ID: shells-and-terminals
:ID:       dae6c7a1-54da-4e7e-ac03-25f6b4fbc494
:END:
** Eshell
:PROPERTIES:
:CUSTOM_ID: eshell
:ID:       723f14cf-df00-422b-a2d9-3c0deeb12d58
:END:
Eshell is an Emacs shell written in Elisp.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package eshell-toggle
    :ensure t
    :custom
    (eshell-toggle-size-fraction 3)
    (ehsell-toggle-use-projectile-root t)
    (eshell-toggle-run-command nil)
    (ehsell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :ensure t
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands '("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

